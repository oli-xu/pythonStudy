{"stop": 1590388088472, "statusDetails": {"trace": "self = <test_reco.TestReco object at 0x1054a5e10>\ncase_data = {'address': '/api/v2/recomm/blogpost/reco', 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}, 'cookies': True, 'file': False, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"reco\")\n    # @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_reco(self, case_data):\n        \"\"\"\n    \n        :param case_data: 测试用例\n        :return:\n        \"\"\"\n        self.init_relevance = ini_request(case_dict, PATH)\n        # 发送测试请求\n>       api_send_check(case_data, case_dict, self.init_relevance, PATH)\n\naff/testcase/blogpost/test_reco.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbin/unit/apiSendCheck.py:28: in api_send_check\n    checkResult.check_result(case[\"test_name\"], case[\"check\"], code, data, _path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'reco'\ncase = {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}\ncode = 415, data = ''\n_path = '/Users/wangjuan/workpace/Aff_service_git/aff/page/blogpost'\nrelevance = None\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n    \n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n        elif case[\"check_type\"] == 'json':\n            expected_request = case[\"expected_request\"]\n            if isinstance(case[\"expected_request\"], str):\n                expected_request = readExpectedResult.read_json(test_name, expected_request, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(name=\"期望code\", body=str(case[\"expected_code\"]))\n                allure.attach(name='期望data', body=str(expected_request))\n                allure.attach(name=\"实际code\", body=str(code))\n                allure.attach(name='实际data', body=str(data))\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_request, data)\n            else:\n>               raise Exception(\"http状态码错误！\\n %s != %s\" % (code, case[\"expected_code\"]))\nE               Exception: http状态码错误！\nE                415 != 200\n\nbin/unit/checkResult.py:66: Exception", "message": "Exception: http状态码错误！\n 415 != 200"}, "labels": [{"value": "blogpost", "name": "feature"}, {"value": "reco", "name": "story"}, {"value": "test_reco", "name": "suite"}, {"value": "TestReco", "name": "subSuite"}, {"value": "aff.testcase.blogpost", "name": "parentSuite"}, {"value": "xiaoxideMacBook.lan", "name": "host"}, {"value": "3333-MainThread", "name": "thread"}, {"value": "pytest", "name": "framework"}, {"value": "cpython3", "name": "language"}, {"value": "aff.testcase.blogpost.test_reco", "name": "package"}], "fullName": "aff.testcase.blogpost.test_reco.TestReco#test_reco", "testCaseId": "e77da5d73a8c2c6c686d78848ee57975", "uuid": "09f40499-ba1e-4894-ab26-64aff4805baa", "name": "test_reco[case_data0]", "description": "\n\n        :param case_data: 测试用例\n        :return:\n        ", "parameters": [{"value": "{'cookies': True, 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}, 'request_type': 'POST', 'relevance': None, 'address': '/api/v2/recomm/blogpost/reco', 'timeout': 20, 'test_name': 'reco', 'http_type': 'https', 'parameter_type': 'application/json', 'parameter': {'itemId': 5044251, 'itemTitle': 'Python面试必须要看的15个问题'}, 'headers': {'X-Requested-With': 'XMLHttpRequest'}, 'file': False, 'info': 'reco'}", "name": "case_data"}], "attachments": [{"source": "8754f63f-a840-4895-86d0-09f6a7c6f257-attachment.txt", "type": "text/plain", "name": "log"}], "start": 1590388088209, "status": "broken", "historyId": "824da654dd8f00eb36d6a8dfb22b181a", "steps": [{"stop": 1590388088217, "status": "passed", "attachments": [{"source": "e6b93a82-25d5-4902-bf66-64db0712900b-attachment.attach", "name": "请求接口"}, {"source": "43e1f570-60ca-4ff7-88d5-af060ddedeb3-attachment.attach", "name": "请求地址"}, {"source": "9ff75412-9522-4a6a-8c25-301963f4c69f-attachment.attach", "name": "请求头"}, {"source": "935d8c5e-49f7-42d6-a1f1-8d340f277e9d-attachment.attach", "name": "请求参数"}], "start": 1590388088215, "name": "POST请求接口"}, {"stop": 1590388088472, "status": "passed", "attachments": [{"source": "6146a8e9-298f-4b4b-969e-f2192442ae73-attachment.attach", "name": "期望code"}, {"source": "96681e6e-b3d6-4586-934f-5ef1a6029126-attachment.attach", "name": "期望data"}, {"source": "80c916a4-2497-4246-86ba-8fc957b682f7-attachment.attach", "name": "实际code"}, {"source": "c29e3c4d-db7f-4031-9156-b28a0cf4f0e3-attachment.attach", "name": "实际data"}], "start": 1590388088469, "name": "JSON格式校验"}]}