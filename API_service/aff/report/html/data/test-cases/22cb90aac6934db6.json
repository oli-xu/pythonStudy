{
  "uid" : "22cb90aac6934db6",
  "name" : "test_reco[case_data0]",
  "fullName" : "aff.testcase.blogpost.test_reco.TestReco#test_reco",
  "historyId" : "824da654dd8f00eb36d6a8dfb22b181a",
  "time" : {
    "start" : 1590388088209,
    "stop" : 1590388088472,
    "duration" : 263
  },
  "description" : "\n\n        :param case_data: 测试用例\n        :return:\n        ",
  "descriptionHtml" : "<pre><code>    :param case_data: 测试用例\n    :return:\n</code></pre>\n",
  "status" : "broken",
  "statusMessage" : "Exception: http状态码错误！\n 415 != 200",
  "statusTrace" : "self = <test_reco.TestReco object at 0x1054a5e10>\ncase_data = {'address': '/api/v2/recomm/blogpost/reco', 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}, 'cookies': True, 'file': False, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"reco\")\n    # @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_reco(self, case_data):\n        \"\"\"\n    \n        :param case_data: 测试用例\n        :return:\n        \"\"\"\n        self.init_relevance = ini_request(case_dict, PATH)\n        # 发送测试请求\n>       api_send_check(case_data, case_dict, self.init_relevance, PATH)\n\naff/testcase/blogpost/test_reco.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbin/unit/apiSendCheck.py:28: in api_send_check\n    checkResult.check_result(case[\"test_name\"], case[\"check\"], code, data, _path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'reco'\ncase = {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}\ncode = 415, data = ''\n_path = '/Users/wangjuan/workpace/Aff_service_git/aff/page/blogpost'\nrelevance = None\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n    \n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n        elif case[\"check_type\"] == 'json':\n            expected_request = case[\"expected_request\"]\n            if isinstance(case[\"expected_request\"], str):\n                expected_request = readExpectedResult.read_json(test_name, expected_request, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(name=\"期望code\", body=str(case[\"expected_code\"]))\n                allure.attach(name='期望data', body=str(expected_request))\n                allure.attach(name=\"实际code\", body=str(code))\n                allure.attach(name='实际data', body=str(data))\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_request, data)\n            else:\n>               raise Exception(\"http状态码错误！\\n %s != %s\" % (code, case[\"expected_code\"]))\nE               Exception: http状态码错误！\nE                415 != 200\n\nbin/unit/checkResult.py:66: Exception",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "\n\n        :param case_data: 测试用例\n        :return:\n        ",
    "status" : "broken",
    "statusMessage" : "Exception: http状态码错误！\n 415 != 200",
    "statusTrace" : "self = <test_reco.TestReco object at 0x1054a5e10>\ncase_data = {'address': '/api/v2/recomm/blogpost/reco', 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}, 'cookies': True, 'file': False, ...}\n\n    @pytest.mark.parametrize(\"case_data\", case_dict[\"test_case\"], ids=[])\n    @allure.story(\"reco\")\n    # @pytest.mark.flaky(reruns=3, reruns_delay=3)\n    def test_reco(self, case_data):\n        \"\"\"\n    \n        :param case_data: 测试用例\n        :return:\n        \"\"\"\n        self.init_relevance = ini_request(case_dict, PATH)\n        # 发送测试请求\n>       api_send_check(case_data, case_dict, self.init_relevance, PATH)\n\naff/testcase/blogpost/test_reco.py:33: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbin/unit/apiSendCheck.py:28: in api_send_check\n    checkResult.check_result(case[\"test_name\"], case[\"check\"], code, data, _path, relevance)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_name = 'reco'\ncase = {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}\ncode = 415, data = ''\n_path = '/Users/wangjuan/workpace/Aff_service_git/aff/page/blogpost'\nrelevance = None\n\n    def check_result(test_name, case, code, data, _path, relevance=None):\n        \"\"\"\n        校验测试结果\n        :param test_name: 测试名称\n        :param case: 测试用例\n        :param code: HTTP状态\n        :param data: 返回的接口json数据\n        :param relevance: 关联值对象\n        :param _path: case路径\n        :return:\n        \"\"\"\n    \n        if case[\"check_type\"] == 'no_check':\n            with allure.step(\"不校验结果\"):\n                pass\n        elif case[\"check_type\"] == 'json':\n            expected_request = case[\"expected_request\"]\n            if isinstance(case[\"expected_request\"], str):\n                expected_request = readExpectedResult.read_json(test_name, expected_request, _path, relevance)\n            with allure.step(\"JSON格式校验\"):\n                allure.attach(name=\"期望code\", body=str(case[\"expected_code\"]))\n                allure.attach(name='期望data', body=str(expected_request))\n                allure.attach(name=\"实际code\", body=str(code))\n                allure.attach(name='实际data', body=str(data))\n            if int(code) == case[\"expected_code\"]:\n                if not data:\n                    data = \"{}\"\n                check_json(expected_request, data)\n            else:\n>               raise Exception(\"http状态码错误！\\n %s != %s\" % (code, case[\"expected_code\"]))\nE               Exception: http状态码错误！\nE                415 != 200\n\nbin/unit/checkResult.py:66: Exception",
    "steps" : [ {
      "name" : "POST请求接口",
      "time" : {
        "start" : 1590388088215,
        "stop" : 1590388088217,
        "duration" : 2
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "201e68f82eb4b0e9",
        "name" : "请求接口",
        "source" : "201e68f82eb4b0e9.attach",
        "type" : "text/plain",
        "size" : 4
      }, {
        "uid" : "625beec645be8a48",
        "name" : "请求地址",
        "source" : "625beec645be8a48.attach",
        "type" : "text/plain",
        "size" : 54
      }, {
        "uid" : "ef1d903cf829f22a",
        "name" : "请求头",
        "source" : "ef1d903cf829f22a.attach",
        "type" : "text/plain",
        "size" : 52
      }, {
        "uid" : "d428a64af44aaec1",
        "name" : "请求参数",
        "source" : "d428a64af44aaec1.attach",
        "type" : "text/plain",
        "size" : 74
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "JSON格式校验",
      "time" : {
        "start" : 1590388088469,
        "stop" : 1590388088472,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ec6f0d3d83ab3ffd",
        "name" : "期望code",
        "source" : "ec6f0d3d83ab3ffd.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "227cfaee2a78ff71",
        "name" : "期望data",
        "source" : "227cfaee2a78ff71.attach",
        "type" : "text/plain",
        "size" : 766
      }, {
        "uid" : "e48d84b6c61be4d3",
        "name" : "实际code",
        "source" : "e48d84b6c61be4d3.attach",
        "type" : "text/plain",
        "size" : 3
      }, {
        "uid" : "f2053132467caa76",
        "name" : "实际data",
        "source" : "f2053132467caa76.attach",
        "type" : "application/octet-stream",
        "size" : 0
      } ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 4,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "11fbbe42ff1f9f26",
      "name" : "log",
      "source" : "11fbbe42ff1f9f26.txt",
      "type" : "text/plain",
      "size" : 1138
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 9,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "blogpost"
  }, {
    "name" : "story",
    "value" : "reco"
  }, {
    "name" : "suite",
    "value" : "test_reco"
  }, {
    "name" : "subSuite",
    "value" : "TestReco"
  }, {
    "name" : "parentSuite",
    "value" : "aff.testcase.blogpost"
  }, {
    "name" : "host",
    "value" : "xiaoxideMacBook.lan"
  }, {
    "name" : "thread",
    "value" : "3333-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "aff.testcase.blogpost.test_reco"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_data",
    "value" : "{'cookies': True, 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}, 'request_type': 'POST', 'relevance': None, 'address': '/api/v2/recomm/blogpost/reco', 'timeout': 20, 'test_name': 'reco', 'http_type': 'https', 'parameter_type': 'application/json', 'parameter': {'itemId': 5044251, 'itemTitle': 'Python面试必须要看的15个问题'}, 'headers': {'X-Requested-With': 'XMLHttpRequest'}, 'file': False, 'info': 'reco'}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "9035a554511c0ce4",
      "status" : "broken",
      "statusDetails" : "FileNotFoundError: [Errno 2] No such file or directory: '/Users/wangjuan/workpace/Aff_service_git/aff/data/cookie.txt'",
      "time" : {
        "start" : 1590388050823,
        "stop" : 1590388050824,
        "duration" : 1
      }
    } ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "22cb90aac6934db6.json",
  "parameterValues" : [ "{'cookies': True, 'check': {'check_type': 'json', 'expected_code': 200, 'expected_request': 'result_reco.json'}, 'request_type': 'POST', 'relevance': None, 'address': '/api/v2/recomm/blogpost/reco', 'timeout': 20, 'test_name': 'reco', 'http_type': 'https', 'parameter_type': 'application/json', 'parameter': {'itemId': 5044251, 'itemTitle': 'Python面试必须要看的15个问题'}, 'headers': {'X-Requested-With': 'XMLHttpRequest'}, 'file': False, 'info': 'reco'}" ]
}